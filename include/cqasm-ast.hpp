/** \file
 * Defines the types for the cQASM abstract syntax tree, based on the classes
 * from `cqasm::tree`.
 *
 * The `cqasm::ast::Node` base class derives from `cqasm::tree::Node`, adding
 * the `visit()` and `dump()` functions.
 *
 * The `visit()` function is used for the visitor pattern. It takes a
 * user-implemented object derived from `Visitor` (also defined here), which
 * has a member function for every kind of node in the tree. The `visit()`
 * function is simply defined to call the function in the `Visitor` class
 * implementation associated with the type of node. This decouples member
 * function implementations from the definition of the recursive structure.
 *
 * Two types of visitor base classes are defined, with different default
 * behavior.
 *
 *  - `Visitor` defaults to a fallback function for node types with no
 *    specific implementation. This would function would usually just be
 *    no-op or throw an appropriate exception, based on what the visitor
 *    is supposed to do.
 *  - `RecursiveVisitor` defaults to traversing the tree depth-first for
 *    non-leaf nodes. Leaf nodes still default to a fallback function. This
 *    is useful when the goal is to flatten the recursive structure in some
 *    way.
 *
 * `dump()` simply uses a predefined visistor class to produce a debug dump.
 * It can be passed any output stream, so you can dump to a string stream to
 * get the result as a string, if you want. There is also an overload for
 * the `<<` operator on streams, so you can use the `std::cout << node;`
 * notation as well.
 *
 * Most of the header/source code for the AST classes is generated by a
 * secondary C++ program at build-time, because defining all the classes
 * manually would be extremely tedious and error-prone.
 */

#ifndef _CQASM_AST_HPP_INCLUDED_
#define _CQASM_AST_HPP_INCLUDED_

#include <stdexcept>
#include "cqasm-ast-head.hpp"
#include "cqasm-ast-gen.hpp"

#endif
